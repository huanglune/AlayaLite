---
name       : CI
on         : [push, pull_request]

env        :
  LLVM_VERSION: 18

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs       :
  commit-format-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    - uses: gsactions/commit-message-checker@v2
      with:
        pattern: '^(feat|fix|docs|style|refactor|chore|perf|test|build|ci|revert)(\(\S+\))?: .+'
        error: Invalid commit type
        excludeDescription: 'true'
        excludeTitle: 'false'
        checkAllCommitMessages: 'true'
        accessToken: ${{ secrets.GITHUB_TOKEN }}

  # Automatically detect spelling errors in the code library
  # Pure spelling checks, such as "receive" for "receive" and "environment" for "environment."
  typo-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout Actions Repository
      uses: actions/checkout@v4
    - name: Spell Check Repo
      uses: crate-ci/typos@v1.36.1
      with:
        config: ./.typo.toml

  py-format-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/ruff-action@v3

    - name: Format code with Ruff
      uses: astral-sh/ruff-action@v3
      with:
        args: format

    - name: Lint code with Ruff
      uses: astral-sh/ruff-action@v3
      with:
        args: check


  py-lint-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4

    - name: Restore Caches
      uses: ./.github/actions/cache-restore

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Analysing the code with pylint
      run: |
        uvx pylint --rcfile=./python/.pylintrc \
          ./examples/**/*.py \
          ./python/src/alayalite/**/*.py \
          ./python/tests/**/*.py

  py-unit-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4

    - name: Restore Caches
      uses: ./.github/actions/cache-restore

    - name: Install uv
        # if: runner.os == 'macOS'
      uses: astral-sh/setup-uv@v5

    - name: Run Python unit tests
      run: |
        uv sync --dev
        uv run pytest


  codecov:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Restore Caches
      uses: ./.github/actions/cache-restore
      with:
        build-type: Debug

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install dependencies
      run: pip install pytest pytest-cov conan && sudo apt-get install -y lcov

    - name: Run python code coverage
      run: |
        uv sync --dev
        uv run pytest --cov --cov-branch --cov-report=xml

    - name: Run c++ code coverage
      run: bash scripts/ci/codecov/gnu_codecoverage.sh

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: |
          coverage.xml
          coverage_c++.info
        token: ${{ secrets.CODECOV_TOKEN }}

  cpp-lint-check:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    needs: [typo-check, commit-format-check, py-format-check, py-lint-check]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Restore Caches
      uses: ./.github/actions/cache-restore

    - name: Set up C++ environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm-${{ env.LLVM_VERSION }}
        cpplint: true
        clang-tidy: true
        clang-format: true
        cmake: true
        ninja: true
        conan: true

    - name: Prepare compile_commands.json
      run: |
        clang++ --version
        mkdir -p build
        cd build
        cmake ..

    - name: run check
      run: |
        ./scripts/ci/cpplint/ci_script.sh
